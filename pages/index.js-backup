import { useEffect, useState } from 'react';

const TABS = [
  { key: 'chat', label: 'Chat & Completion', type: 'chat/completion' },
  { key: 'audio', label: 'Audio & Transcriptions', type: 'audio/transcriptions' },
  { key: 'embed', label: 'Embeddings', type: 'embeddings' },
  { key: 'images', label: 'Image & Generation', type: 'images/generations' },
];

export default function Home() {
  const [models, setModels] = useState([]);
  const [tab, setTab] = useState('chat');
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState('');
  const [sortField, setSortField] = useState('name');
  const [sortAsc, setSortAsc] = useState(true);

  useEffect(() => {
    async function load() {
      setLoading(true);
      try {
        const r = await fetch('/api/models');
        const j = await r.json();
        setModels(j.models || []);
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    }
    load();
    const t = setInterval(load, 60000);
    return () => clearInterval(t);
  }, []);

  const currentType = TABS.find(ti => ti.key === tab).type;

  const filtered = models
    .filter(m => m.type === currentType)
    .filter(m =>
      m.name.toLowerCase().includes(search.toLowerCase()) ||
      m.providerId.toLowerCase().includes(search.toLowerCase())
    )
    .sort((a, b) => {
      const A = a[sortField] ?? '';
      const B = b[sortField] ?? '';
      if (typeof A === 'number' && typeof B === 'number') {
        return sortAsc ? A - B : B - A;
      }
      return sortAsc
        ? String(A).localeCompare(String(B))
        : String(B).localeCompare(String(A));
    });

  const toggleSort = (field) => {
    if (sortField === field) {
      setSortAsc(!sortAsc);
    } else {
      setSortField(field);
      setSortAsc(true);
    }
  };

  const th = (label, field) => (
    <th
      onClick={() => toggleSort(field)}
      className="p-2 border cursor-pointer select-none"
    >
      {label}
      {sortField === field ? (sortAsc ? ' ▲' : ' ▼') : ''}
    </th>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-2xl font-bold mb-4">A4F — Free Models (live)</h1>

        <div className="flex flex-wrap gap-2 mb-4">
          {TABS.map(ti => (
            <button
              key={ti.key}
              onClick={() => setTab(ti.key)}
              className={`px-4 py-2 rounded ${
                tab === ti.key ? 'bg-sky-600 text-white' : 'bg-white border'
              }`}
            >
              {ti.label.split(' ')[0]}
            </button>
          ))}
          <input
            type="text"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            placeholder="Search model or provider..."
            className="ml-auto border rounded px-3 py-1"
          />
        </div>

        {loading ? (
          <div>Loading…</div>
        ) : (
          <div className="overflow-x-auto bg-white border rounded">
            <table className="w-full table-auto border-collapse">
              <thead className="bg-gray-100">
                <tr>
                  {th('Model', 'name')}
                  {th('Provider (fastest)', 'providerId')}
                  {th('Function', 'function')}
                  {th('Vision', 'vision')}
                  {th('Audio', 'audio')}
                  {th('Reasoning', 'reasoning')}
                  {th('Context (tokens/≈words)', 'context_window')}
                  {th('Latency (s)', 'latency')}
                  {th('Uptime %', 'uptime')}
                </tr>
              </thead>
              <tbody>
                {filtered.map((m, i) => {
                  const ctxTokens = m.context_window
                    ? m.context_window.toLocaleString()
                    : '-';
                  const ctxWords = m.context_window
                    ? Math.round(m.context_window / 4).toLocaleString()
                    : '-';
                  const latencySec = m.latency
                    ? parseFloat(String(m.latency).match(/[\d.]+/)?.[0] || 0)
                    : null;

                  return (
                    <tr
                      key={m.providerId + m.name}
                      className={i % 2 === 0 ? 'bg-gray-50' : ''}
                    >
                      <td className="p-2 border">{m.name}</td>
                      <td className="p-2 border font-mono">{m.providerId}</td>
                      <td className="p-2 border text-center">
                        {m.capabilities.function_calling ? '✅' : ''}
                      </td>
                      <td className="p-2 border text-center">
                        {m.capabilities.vision ? '✅' : ''}
                      </td>
                      <td className="p-2 border text-center">
                        {m.capabilities.audio ? '✅' : ''}
                      </td>
                      <td className="p-2 border text-center">
                        {m.capabilities.reasoning ? '✅' : ''}
                      </td>
                      <td className="p-2 border text-center">
                        {ctxTokens} / ≈{ctxWords}
                      </td>
                      <td className="p-2 border text-center">
                        {latencySec != null ? latencySec.toFixed(1) : '-'}
                      </td>
                      <td className="p-2 border text-center">
                        {m.uptime ? m.uptime : 'NA'}
                      </td>
                    </tr>
                  );
                })}
                {filtered.length === 0 && (
                  <tr>
                    <td
                      colSpan="9"
                      className="p-4 text-center text-gray-500 border"
                    >
                      No models match this filter
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

